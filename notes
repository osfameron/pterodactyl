pterodactyl - Programmer's Text Editor for Winged Dinosaurs

Possibly "PTE" for Piece Table Editor
  (though the final data-structure may be tree based)

Command:
  pterodactyl   (eeek!)
  ptero
  pt            (but platinum surfer)
  pd
  pc            (for pterodactyl client)
  wi            (short for "wingfinger", pleasant resonance with vi)

chunk into ~1K blocks?

[the]->[quick]->[brown]->[fox]->...

cursor is zipper.  Knows position by char, and by indexes (e.g. of newlines,
words, etc.)

indexing done by lexer (which can then feed into highlighter)

components:
  - lexer
  - highlighter

movements
  direction (f/b)
  inner/outer position (could be delimiter)

  e.g.
    "foo bar^ baz"
      /ba (forward and back)
         bbBBFff
      movement commands could go to:
        begin B
        end b
        begin b
        end F
        begin f
        end F
      and can act on whole area bBFf

    either:
      "inner" would be "BF" area
      "outer" would be "bBFf" area
    OR
      bBFf is calculated separately
      e.g.   <foo><bar> ^ </foo></bar>
                  BBBBBB F
      (should movement F/B commands be calculated from this?)

    defmulti dispatch?

    It looks like Movement commands should be:
      :: zipper -> zipper

    But this would allow badly behaved movement commands to return malformed
    zippers (e.g. behave destructively)

    Options:
      a) don't worry, just ask them nicely to be well behaved
        (this is fine, but other options are quite interesting)
      b) search with a fold of zipper movements, that returns true
        at the correct zipper.
        (this allows us to peek back/forth as required, but not change
        anything).
        But is it inefficient - e.g. if we can search more efficiently
        by using the index etc.
      c) communicate back to main function with a protocol
        e.g. by returning something like
          :next-piece   # discard this piece, giving me the zipper starting at
                        # next piece
          [5 2]         # inner at position 5, 2-long delimiter
          nil           # couldn't complete movement
        except that we might need to keep state, so would that have to be
        passed back and forth between functions?
      d) perhaps something like above, but the movement function accepts a
         function for next-piece (that updates an atom with the zipper)
         this allows the movement command to simply return the offset from
         current @zipper, maintaining its own state
      e) encapsulate the zipper in a function which takes e.g. movement or
         update commands as parameters with keywords.
         (defn my-movement [dactyl]
            (dactyl :right 5)
            (dactyl :search :backwards ">"))
            ; TODO provide some combinator macro to apply dactyl repeatedly to 
            ; new args?  e.g. syntactic sugar for reduce
         (defn my-movement [dactyl]
            (=> dactyl 
              (:right 5)
              (:search :backwards ">")))
          The dactyl function passed to movement commands will be read-only,
          while others might have e.g.
            (=> dactyl
              (:search "foo")
              (:select)
              (:replace "bar"))
      f) cp datomic.  So we can use the dactyl as a value, but to interact with it have to call
         a `transact` like method, which attempts to apply the transformation, a bit like update!
         As a dactyl can know what the *boundaries* of any moves/changes made have been since last time,
         it could also trivially check that those things don't seem to have changed, and error/warn
         if they have?

          
Current vim bindings.  
  "!" means I think this is nonsense and may overwrite
  "?" means I'm pondering if this is needed

    lower                       upper
a  append                      append to end
b  back                        ?back (WORD)
c  change                      c$
d  delete                      d$
e  !forward (end)              !forward (end) (WORD)
f  find-in-line                like f, backwards
g  !misc (mostly alternates)   ?goto line
h  left                        !go to top (modulo scrolloff)
i  insert                      insert at beginning
j  down                        join
k  up                          ?lookup keyword
l  right                       !go to bottom (module scrolloff)
m  mark                        !go to middle (modulo scrolloff)
n  re-search                   re-search backwards
o  open line                   open line above
p  paste                       !paste before
q  !macro                      !Ex mode
r  replace char                replace mode
s  !subs character             !synonym cc
t  find-in-line-inner          like t, backwards
u  undo                        !weird vi-undo
v  visual mode                 linewise visual
w  forward (beginning)         like w (WORD)
x  delete char                 delete char backwards
y  yank                        syn yy (but more sense y$)
z  !misc (mostly zoom/folds)   !unused, but see ZZ
  
Notes:
  - should the WORD (inc punctuation) movements be an option?
  - e/E could move beginning/end of current word/selection instead
    (like O in visual mode)
  - t/f should find character anywhere, and n/N repeat that search, freeing
        up ,/;
     - or choose inner/outer as default, for example inner (t),
       and then use {go}{outer}t e.g. gat or gif for the alternative
  - U as "explore undo tree"?      
  - g should become "goto THING"
  - k could become various lookups (help, definition etc.)
  - should i/a/o take text objects?
      e.g. {with}{sentence}O (open newline before current sentence)
      ... or should default way be {text object}{grow/shrink}{operation} instead of other way around?
      ... which I guess is the visual-mode way of thinking about things, is
      that what I want?
      (ish, but I still want dd, D, C, d0, x)
  - macro recording can be a function call or composite keystroke
    (or alternatively q ok, and Q to call it)


So new mappings:

NORMAL
[] by word (or token)
() by sentence (or line)
{} by para (or block)
<>
"'
    lower                       upper
a  shrink-sel       A grow-sel         ^a unwrap?         ^A all-text menu
b  buffer ...       B ?
c  copy             C ?                                   ^C copy
d  ? (just dd and D?)
e  start-word/sel   E end-word/sel
f  find-char        F find-char backwards                 ^F find ...
g  go ...           G go to line                          ^G go menu
  gd (go definition) 
h  left             H ?                                   ^H help menu
i  insert           I insert after
j  down             J join
k  up               K ?
l  right            L ?
m  make ...         M mark                                ^M make menu
  mt (make test) me (eval) etc.
n  re-search        N re-search backwards                 ^N next qbe
o  open line        O open line above
  (or are these just sli / SI ?)
p  push (split)     P push (but follow onto the new line) ^P prev qbe
q  query ...        Q insert template                     ^Q template menu
  q8, qd (jump to definition)
r  replace char/sel R replace mode                        ^R Redo
s  select (visual)  S s$                                  ^S save
t  transform ...    T toggle case                         ^T open file
  t- t_ tc (snake kebab camel), tu tl (case), tr (reverse), tf (format)
u  undo             U ? (redo?)                           ^U gundo menu
v  paste            V paste special...                    ^V paste
w  window/buff ...  W ?                                   ^W close buffer
x  delete char/sel  X delete char backwards               ^X cut
y  yank mode        Y ?                                   ^Y redo
z  zoom ...         Z ?                                   ^Z undo
  e.g. view settings?
. repeat    ^. magic repeat  
, repeat move  ; repeat inverse move
| sse<ESC>
0 sle<ESC>
$ slE<ESC>

(file management is more destructive, so is managed with ^ commands)
in general most commands should be lower-case without modifiers
only ^ mappings should open a menu

TEXT OBJECTS
i/a compatibility with vim (though can be overridden with e/E)
l   line
[]w word
()s sentence
{}p paragraph/block
<>t tag
"d quote
'q
`b

insert mode
^n/^p auto-complete

PLUGIN notes

From emacs:
  - functions vs. "interactive" ones
  - interactive done as argument to 'defun' macro.  
  - options like "p" get the prefix argument (like Vim count?)
  - point, mark, mark-ring, exchange-point-and-mark, save-excursion
  - transient-mark-mode "makes Emacs behave sanely by using visible regions
    like other editors."
  - describe-function
  - major / minor modes, hooks
    - major seem like ftplugins
    - minor like generic plugins, but can be turned on/off
    - hooks allow e.g. "slime" (major) to turn on "eldoc" (minor)
    - see https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
      for an example of getting mappings for a mode (IBuffer) to make sense
      with an alternative input strategy (Evil)
      can we do better than this?
      (e.g. keymapping -> generic intermediate layer -> plugin functionality)
  - package.el, cask, pallet (tools like Vundle?)
  - window/frame naming more logical (but now backwards from how everyone else
    does it)
  - ido ("interactively do things" like ctrl-p, helm etc.)
  - line numbers
  - scratch buffers
  - repls (and terminal emulators) within emacs
  - prompts, and how to disable them
  - echo area
  - melpa (use-package)
    :ensure  (auto fetches)
    :mode (defers loading till file extension found)
    :commands (define, don't run)
    :init (run immediately)
    :config (run after package loaded)
  - (visual-line-mode 1) "gives you sane word wrapping in almost all cases."

From vim
  - spell
  - omnicomplete
  - buffer-local mappings
  - autocommands, events
  - status lines
  - plugin layout
    - colors/
    - plugin/ (load once, on plugin load)
    - after/  (like plugin, but after internal files)
    - autoload/ (for lazy loading?)
    - ftdetect/
    - ftplugin/ (handles buffers of given filetype)
    - indent/  (as above, but for indentation)
    - compiler/ ???
    - doc/
    - syntax/
    - folding.vim
  - changing movement commands for filetypes (with nnoremap...)
  - calling external commands, e.g. filters
  - scratch splits
  - buffer types:
    nofile
    nowrite
    acwrite (autocommand write)
    quickfix
    help
    directory
    scratch
    unlisted
    (bufhidden, swapfile)
  - distribution  (clojars / github?)
  - <D-...> mappings, e.g. <D-V>

Dactyl
======
Uses a zipper or finger structure, which we'll call a "Dactyl"
(Currently the code structure called Dactyl is very low level,
in that you have to directly wrangle the data-structures.
Perhaps that should be "Phalange"? ;-)

A dactyl instead could be that encapsulated function that has
a defined public interface.

Phalange
========

# Accumulator functions:
  Right now, Dactyl has:
      - acc-pos.  accumulated character position at beginning of current piece
      - curr-pos.  offset within current piece

  But also needs:
      - line number at beginning of current piece
      - number of words at beginning of current piece

  Piece then needs:
      - number of chars (which it has, calculably)
      - number of lines
      - number of words

  This could be done with generic accumulator functions.
  These could also be added by plugins.

NB: the fact that I'm adding
  {:pre [(#(instance? Dactyl %) dactyl)]}
to each function does suggest I should be implementing a protocol instead?



Types of function
=================

NB: implicit parameters may be a Really Bad Idea, will reconsider
(but fun to play with macros and ideas for now)

 - movements (def-movement) implicit &dactyl
  - call with (move ...)
    (hmm, movements get dactyl, then call (&dactyl :movement) presumably
     there is a limited core set of movements that the others bootstrap
     off)
  - NB: we need to distinguish
     a) greedy/non-greedy movements
      (e.g. does bounce stop processing?  stop at edge?  or stop at previous location)
      (currently distinction between 
        => macro (greedy) 
        traverse (non-greedy)
      but both should handle both use-cases)
     b) inner/outer position
      
 - text actions (def-action) implicit &dactyl, &count
  - call with (call ...)
 - accumulator (def-accumulator) "string" -> {:thing count}

Callbacks:
 - should-run-plugin  (takes plugin state + new buffer details -> bool)
 - 

Notes from http://www.finseth.com/craft/
========================================
- very confused, needs editing.  old fashioned, examples in C
- 2d editors
- reading/writing non-standard filetypes / different platforms
(assume host language does this?)
- RTL etc.
- hyphenation algorithms
- buffer:  read / write / insert
- region is just space between point and mark
(simple, but how does this work with e.g. line-based regions?)
- distinction "normal" vs "fixed" marks important?
- "Point is the current location where editing operations are taking place. It is defined in terms of a private data type, since different implementations will use different representations. As it turns out, there is never a need for any code outside of the sub-editor to ever be aware of the representation of this data type."
- Buffer attributes:
  (a lot of these would actually be on the dactyl rather than the buffer)
  Next-chain-entry (e.g. next buffer)
  Buffer-name
  Point
  Cur-line
  Num-chars
  Mark-list
  Contents
  File-name
  File-time
  Is-modified
  Mode stuff (huh, this is supposed to be a basic editor)
  Add-proc (entry point to recreated command tables for this buffer?)

- section 6.3 all the vital commands for "Sub-editor"
  World-init (set up everything on editor invocation)
  World-fini (terminate that)

  World-save (save all editor state)
  World-load  load " - he admits this is probably useless

  buffer-create
  buffer-clear
  buffer-delete
  buffer-set (choose which buffer we're editing)
  buffer-set/get-name

  point-set/get (location)
  point-move
  point-get-line
  buffer-start (move to 0)
  buffer-end (move to end)
  compare-location
  location-to-count / vv

  mark-create
  mark-delete
  mark-to-point - moves a mark to insertion point
  point-to-mark - moves point to a mark
  mark-get (gets location of mark.  not useful though)
  mark-set (moves mark to specified location)
  is-point-at/before/after-mark?
  swap-point-and-mark

  get-char (after point, or nil if at end)
  get string (count) after point
  get-num-chars (length of buffer)
  get-num-lines
  get/set-file-name
  buffer-read
  buffer-insert
  set/get-modified

  mode-append
  mode-delete
  mode-invoke

  insert-char/string
  replace-char/string
  delete-forwards/backwards
  delete-region (between point and mark)
  copy-region

  search-forward  (leaves point at *end* result, to allow next search to work)
  search backwards (point at *beginning* of result)
    (search is noop if not found)
  is-a-match (at point)
  find-first-(not-)in-forward/backward e.g. [0123456789], 
    (unlike search, find-first- go to end of buffer if not found)
    (these are used to do e.g. "move to start of next line"
     "move to start of next word" etc.)

  get-column (takes into account tabs, variable width characters etc.)
  set-column (e.g. move to that column in line, rounding on tab to either closest or next highest, as appropriate)

6.4 implementation techniques
Lots of low-level memory management stuffs we don't care about.

6.9 "The other methods involve tracking small chunks of characters or even
individual characters. While they are in principle do-able, their small object
size serves to increase the amount of memory and CPU overhead, unfortunately
without offering any compensating advantages. Thus, they remain largely
unused."
(I think he's talking about piece tables etc.)

7.2.1 Editor Procedures
  windows-init/fini/save/load
  redisplay (incremental refresh window - interruptable)
  recenter/set-pref-pct (move pointer to line in centre/X%... e.g. like zz but customizable?)
  get-point-row/col - coord within window
  window-create/destroy (create is a split, showing same data)
  window-grow (e.g. within frame)
  get-window-top/bot-line (line within *screen*)
  get-window-top/bot (position within *buffer*)

7.2.2 display independent procedures
e.g. mostly what Curses or http://sjl.bitbucket.org/clojure-lanterna/
will do
  (various key- methods mostly uninteresting)
  screen-rows/cols (e.g. the window frame available)
  screen-attributes (what's supported: bold, reverse, etc.)
  set-cursor (e.g. the display of point within screen)
  various put/get of chars/strings/attributes/info
  beep
  clear line/screen/to-eol/to-eos
  insert/delete/scroll lines etc.

Other bits
  Status line
  Horizontal scrolling vs line wrap
  word wrap 
    (requires lookahead in redisplay algorithm)
    + breaking rules
    + ruler lines (really?)
    + you have to track where the word wrap occurs, for wysiwyg editing
    "If you do implement word wrap, you may as well go the whole way and support flushing right, centering, and justification of text during display."

  Tab stops (regular / set list)
  non-trad tabs: right tabs, decimal tabs, centering tabs

  Non-printing control characters
  - choose notation (octal, "caret notation", unicode char name, etc.)
  - "Once you have tabs and control characters down, displaying text in a proportionally spaced font is not too difficult. "
  
Breaking between redraw of lines:
"Lest there be any doubt: between-line breakout is a very important feature and should only be left out of the very simplest implementations or those implementations that can complete even the most complex redisplay in under 100 msec."

Multiple Windows?
  - no support
  - horizontal only
  - hor/vert, tiled
  - arbitrary, tiled (e.g. in windowing system)

if multiple, changes should be reflected immediately in other windows

7.4
converting sub-editor changes to redisplay operations can be subtle

"The framer is that part of the redisplay code that decides what part of the buffer will appear in the window."
2 marks: top/bottom of window
If point still in that range, don't move window

Sub-Editor should advise if modification or movement attempted,
possibly in a space constrained by a window mark
  - possibly not just top/bottom of window, as may interact with line-wrap
    and horiz scrolling
   (Can't sub editor just advise of what positions have been changed, and
    window can decide whether to redraw based on that?)

7.4.4 advanced algorithm looks overcomplicated - why not just diff the visible
portion, rather than complecting with unique identifiers?
(Though in fact I guess most of this is handled by

NB: 8 combinations of directions (e.g. if not L-R T-B western bias)

How would outlining affect redisplay?

Unicode: Ligatures & contextual forms, how affect cursor motion/redisplay?

Chapter 8.
  - 2nd level dispatch (this may be easier originally than arbitrary keybindings)
  - accept an argument
  - vi-style vs Emacs "universal argument" command (see 8.3.1)

8.2 error handling/ recovery/exit

8.3 arguments
  - numeric prefix
  - explains universal argument (but I don't really get what it's for)
  - String args (suffix)
    - should have a prompt
    - key to submit/abort should be clear
    - only perform action after all input entered
      (what about incremental search? ok, ESC returns to original location,
      so state not inconsistent)
    - default value
    - as buffers (allowing multitasking, context switch)
      also e.g. file-completion or incremental search
  - Positional arguments
    - e.g. position of pointer or region is itself an argument.

8.4 remapping
e.g. different styles:
  - insert char
  - insert char with save
  - insert char, filling hard wraps
  - overwrite instead of inserting char

overlaying definitions.

8.5 types of mode

 - implicit (like Adventure text adventure... seems like odd example/word?)
 - explicit (auto-save, auto-fill, as above, e.g. alternate command-sets)
 - automatic (by filetype)

Modes are per-buffer, and switch as you change buffer

8.6
  - Kill ring
    - successive deletions should stack
  - Undo
    - operates on a user-command basis, not sub-editor operation
    - consecutive insertions as single command
    - limit of undo (perhaps not issue with immutable structure?)
    - undoing state outside of the sub-editor?
    - undoing movements (e.g. jumplist)

8.7 Macros
  - again
  - key recorder
  - scripting language
  - NB: because macro operates without screen display, reinforces the separation of concerns

9.10 command  summary (todo note)
